SPR# 状 P Open Close ver     Type  概要
-------------------------------------------------------------------------------
0001 ◎ C 05/20 05/20 0.001│ToDo│KuhnPoker プロジェクト作成
0002 ◎ C 05/20 05/20 0.001│ToDo│KuhnPoker Agent を４種類（最適、ランダム、強気、弱気）実装
0003 ◎ C 05/20 05/20 0.001│ToDo│プレイアウト＆学習を行う playout_ML() 実装
0004 ◎ C 05/20 05/20 0.001│ToDo│Agent::get_name() : string メソッド追加
0005 ◎ C 05/20 05/20 0.001│ToDo│KuhnPoker4C プロジェクト追加
0006 ◎ C 05/21 05/21 0.001│ToDo│OptimalAI：alpha = 5%、30% に分ける
0007 ◎ C 05/21 05/21 0.001│ToDo│KuhnPoker5C プロジェクト追加
0008 ◎ C 05/21 05/21 0.001│ToDo│KuhnPoker3P プロジェクト追加
0009 ◎ C 05/21 05/21 0.001│ToDo│playout() の bML 引数は削除
0010 ◎ C 05/21 05/22 0.001│ToDo│KuhnPoker::m_key, m_map は削除
0011 ◎ C 05/21 05/22 0.001│ToDo│playout() の swapped 引数は削除
0012 ○ C 05/21            │ToDo│KuhnPoker3P：KuhnPoker3P::m_n_act_players 追加
0013 ◎ C 05/22 05/22 0.001│ToDo│KuhnPoker4C プロジェクト削除
0014 ◎ C 05/22 05/22 0.001│ToDo│m_hist_actions は不要なので削除？
0015 ◎ C 05/22 05/22 0.001│問題│KuhnPoker：Checked-Checked, Raised-Called で精算にならず、３手目に行ってしまう？
0016 ◎ C 05/22 05/22 0.001│ToDo│Counterfractual value がマイナスになった場合は 0 に
0017 ◎ C 05/23 05/23 0.001│ToDo│KuhnPoker：CFR 自己対戦学習で混合戦略ナッシュ均衡にならない
0018 ◎ C 05/23 05/23 0.001│ToDo│KuhnPoker > CFR 自己対戦学習：Q Check-Raise の場合に 100% コールしている（プレイアウト：100回）
0019 ◎ C 05/23 05/23 0.001│ToDo│KuhnPoker > CFR 自己対戦学習：J のレイズ確率は0%のはずなのに、３手目に相手のランクがJの場合がある？？？
									原因：Checked→Checked なのに精算処理されていない？ → されている
									原因：反事実：Checked→Raised の場合も学習処理を行っている
0020 ◎ C 05/23 05/23 0.001│ToDo│KuhnPoker5C > 学習結果：％表示
0021 ◎ C 05/23 05/23 0.001│ToDo│KuhnPoker5C：反事実テーブルの値が0未満にならないように
0022 ◎ C 05/23 05/23 0.001│ToDo│KuhnPoker, CFRAgent::m_map 削除
0023 ◎ C 05/24 05/24 0.001│ToDo│KuhnPoker3P：playout_sub() で再帰的に試行
0024 ◎ C 05/24 05/24 0.001│問題│KuhnPoker3P：レイズ、フォールド、フォールドのとき、ut[1] が 0 になっている
0025 ◎ C 05/24 05/24 0.001│問題│KuhnPoker3P：チェック、チェック、レイズ、コール、フォールドのとき、ut[0] が -1 になっている
0026 ◎ C 05/24 05/24 0.001│問題│KuhnPoker3P：レイズ、フォールド、フォールドのとき、ut[0] が +3 になっている
0027 ◎ C 05/24 05/25 0.001│ToDo│KuhnPoker3P：CFRAgent をとりあえず実装
0028 ◎ C 05/24 05/25 0.001│ToDo│KuhnPoker3P：ut[] 平均を最後に表示
0029 ◎ C 05/25 05/25 0.001│ToDo│sel_action()：引数にアクション履歴情報を追加、n_actions は削除
0030 ◎ C 05/25 05/25 0.001│ToDo│プレイアウト後に g_map 全要素表示
0031 ◎ C 05/25 05/25 0.001│ToDo│KuhnPoker3P：反事実値更新処理
0032 ◎ C 05/26 05/25 0.001│ToDo│KuhnPoker3P：pot, raised, n_active をメンバ変数に
0033 ◎ C 05/26 05/25 0.001│ToDo│KuhnPoker3P：do_action(act), undo_action(act) 追加
0034 ◎ C 05/26 05/26 0.001│問題│100万回の試行でも A: が {0, 0} になってしまう
0035 ◎ C 05/26 05/26 0.001│問題│手札がAなのに、ARC で 100% フォールドしてしまう
0036 ◎ C 05/26 05/26 0.001│問題│リレイズされる場合がある
0037 ◎ C 05/26 05/26 0.001│問題│手札がJなのに、JcRF で 100% コールしてしまう
0038 ◎ C 05/26 05/26 0.001│問題│手札がAなのに、AccR で 100% フォールドしてしまう
0039 ◎ C 05/26 05/26 0.001│問題│Fold したのに、効用（utility）がプラスの値になることがある
0040 ◎ C 05/26 05/26 0.001│ToDo│playout_sub()：n_actions 引数は削除
0041 ◎ C 05/26 05/26 0.001│問題│手札がAなのに、AcRF でフォールドしてしまう場合がある
									原因：反事実 Fold しているのに、効用が +4 になっている
0042 ◎ C 05/26 06/02 0.001│ToDo│全プレイアウト終了後に utility 平均値を表示
0043 ◎ C 05/30 05/30 0.001│ToDo│RiverOnly プロジェクト追加
0044 ◎ C 05/31 05/31 0.001│ToDo│Deck.h cpp, poker.h cpp をプロジェクトに追加
0045 ◎ C 05/31 05/31 0.001│ToDo│プレイヤー３人に２枚を配り、コミュニティカードも５枚配る
0046 ◎ C 05/31 05/31 0.001│ToDo│プレイアウトを行うための RiverOnlyPoker クラス追加
0047 ◎ C 05/31 05/31 0.001│ToDo│着手を選択する Agent 基底クラス追加
0048 ◎ C 05/31 06/01 0.001│ToDo│RiverOnlyPoker::playout()：各プレイヤーに２枚ずつ、コミュカードに５枚カード配布
0049 ◎ C 06/01 06/01 0.001│ToDo│RiverOnlyPoker：勝敗判定を手札・コミュカードにより決める（とりあえず同じ役は考慮しない？）
0050 ◎ C 06/01 06/01 0.001│ToDo│RiverOnlyPoker：カード配布時点で手役を計算し、保存しておく
0051 ◎ C 06/01 06/01 0.001│ToDo│RiverOnlyPoker：checkHandBM(v, odr) を使い手役計算、結果保存
0052 ◎ C 06/01 06/01 0.001│ToDo│odr を用いた勝敗判定
0053 ◎ C 06/01 06/02 0.001│ToDo│予め、手札・コミュカードでの勝率を計算
0054 ◎ C 06/02 06/02 0.001│ToDo│River 専用・deck.shuffle() を利用しない calcWinSplitProbRO() を実装
0055 ◎ C 06/02 06/02 0.001│ToDo│calcWinSplitProbRO()：カード情報を保持する g_vv を使用せず、たんなる vector<Card> g_v を用いる
0056 ◎ C 06/02 06/02 0.001│問題│calcWinSplitProbRO() の結果が常に 0.45 程度になってしまう？
0057 ◎ C 06/02 06/02 0.001│ToDo│CFRAgent 実装
0058 ○ C 06/02            │問題│レイズ→フォールド→フォールド で精算にならない
0059 ◎ C 06/02 06/02 0.001│ToDo│10万回プレイアウト学習→ 703秒を要した
0060 ◎ C 11/29 11/29 0.001│ToDo│Glico プロジェクト追加
0061 ◎ C 11/29 11/29 0.001│問題│勝率計算が不正
0062 ◎ C 11/29 11/29 0.001│ToDo│calc_win_count_random_DP() 実装
0063 ◎ C 11/29 11/29 0.001│ToDo│print_win_count()：右方向をP1に変更
0064 ◎ C 11/29 11/29 0.001│ToDo│calc_win_count_random()：処理時間計測・表示
0065 ◎ C 11/29 11/29 0.001│ToDo│print_win_count()：四捨五入して小数点以下１桁表示
0066 ◎ C 11/29 11/29 0.001│ToDo│print_win_count()：10%未満の場合も小数点以下１桁まで表示
0067 ● C 11/29            │ToDo│calc_win_count_CFR_DP() 実装
0068 ● C 11/29            │ToDo│print_sum_regrets() 実装
0069 ◎ C 12/17 12/17 0.001│ToDo│DPCFR_KuhnPoker プロジェクト追加
0070 ◎ C 12/17 12/17 0.001│ToDo│key：手札＋行動履歴（Check or Raise）に変更
0071 ● C 12/17            │ToDo│
0072 ● C 12/17            │ToDo│
0073 ● C 12/17            │ToDo│
0074 ● C 12/17            │ToDo│
0075 ● C 12/17            │ToDo│
0076 ● C 12/17            │ToDo│
0077 ● C 12/17            │ToDo│
0078 ● C 12/17            │ToDo│
0079 ● C 12/17            │ToDo│
0080 ● C 12/17            │ToDo│
